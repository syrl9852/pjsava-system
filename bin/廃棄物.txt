	if (command === "rolelist") {
		var roleList = message.member.roles.cache.map(role => role.name)
		message.channel.send(roleList,{
			allowedMentions: {
				parse: []
			}
		})
	}


	

	//メンバーのIDBAN
	if (command.startsWith('idban') && message.guild) {
		console.log(client.users.fetch('630661253974720553'))/*
		if (!message.member.roles.cache.has('860116183146561566')) {
			message.channel.send('権限が不足しています。\n権限を確認してください。')
			return;
		}
		//メンションの確認
		if (message.mentions.members.size !== 1) {
			message.channel.send('BANするメンバーを1人指定してください')
			return
		}
		//メンション相手の指定
		var member = message.mentions.members.first()
		//自分ではないか確認
		if (member.id == message.member.id) {
			message.channel.send('自分をBANすることはできません。')
			return;
		}
		//メンバーのBANが可能か確認
		if (!member.bannable) {
			message.channel.send('このユーザーをBANすることができません')
			return;
		}
		var reason = args.join(" ");
		var reason = reason.slice(22);
		if (reason == "") {
			message.channel.send({
				embed: {
					author: {
						name: client.user.username,
						icon_url: client.user.displayAvatarURL({
							format: "png",
							dynamic: true,
							size: 128
						})
					},
					title: "BAN理由が未指定です。",
					description: "30秒以内に理由を送信してください。\n送信されない場合は本処理は終了されます。\nキャンセルする場合はCancelと入力してください。",
					color: 10551294,
					footer: {
						text: "412 Precondition Failed"
					}
				}
			})
			const filter = msg => msg.author.id === message.author.id
			const collected = await message.channel.awaitMessages(filter, { max: 1, time: 30000 })
			const response = collected.first()
			var cancel_check = response.content.toLowerCase()
			if (cancel_check == "cancel") {
				message.channel.send({
					embed: {
						author: {
							name: client.user.username,
							icon_url: client.user.displayAvatarURL({
								format: "png",
								dynamic: true,
								size: 128
							})
						},
						description: "Cancelコマンドが実行されたため、処理を終了します。",
						color: 10551294,
						footer: {
							text: "408 Request Timeout"
						}
					}
				})
				return;				
			}
			if (!response) {
				message.channel.send({
					embed: {
						author: {
							name: client.user.username,
							icon_url: client.user.displayAvatarURL({
								format: "png",
								dynamic: true,
								size: 128
							})
						},
						description: "理由未送信状態が30秒経過したため、本処理を終了します。",
						color: 10551294,
						footer: {
							text: "408 Request Timeout"
						}
					}
				})
				return;
			}
			var reason = response.content
		}
		//BAN処理
		member.ban({reason: reason})
		//BAN成功報告
		message.channel.send(`${member.user.tag}をBANしました\n理由：` + reason)*/
	}

	/*
		//チャンネル検索
		var channel = client.guild.get("849602478475706378").channels.cache.find((channel) => channel.name === message.author.username)
		//チャンネル不在？
		if (channel == undefined) {
			//チャンネルの作成
			client.guild.get("849602478475706378").channels.create(
				message.author.username, 
				{
					parent: "868889017402413096",
					topic: message.author.id
				}
			)
		}
		channel.send(message.content)
		*/
	/*
	//問い合わせカテゴリ内のチャンネルで送信されたメッセージを
	if (message.channel.parentID == "868889017402413096") {
		client.users.cache.get(message.channel.topic).send(message.content)
	}
	*/
	
	
	/*
	//できそうになったらまたよろしく
	if (command === "aaaaaaa") {
		const msc = await message.channel.send({
			"embed": {
				"title": "推しユニット設定",
				"description": "下のリアクションから、推しユニットを選んでください",
				"url": "https://pjsekai.sega.jp/character/index.html",
				"color": 10551294,
				"fields": [{
					"name": "絵文字とユニット名の対応表",
					"value": "<:vitual_singer:870554150696538192> Vitual Singer\n<:leo_need:870554250957180949> Leo/need\n<:more_more_jump:870554331462635560> More More Jump!\n<:vivid_bad_squad:870554421904412702> Vivid BAD SQUAD\n<:wonder:870554828600909855> ワンダーランズ×ショウタイム\n<:nightcord:870555025674477608> 25時、ナイトコードで。"
				}]
			}
		})
		msc.react('870554150696538192')
		msc.react('870554250957180949')
		msc.react('870554331462635560')
		msc.react('870554421904412702')
		msc.react('870554828600909855')
		msc.react('870555025674477608')
	}
	*/ 
	
/*チャンネルの自動消去*/
	/*if (message.channel.topic == /automaticmanagement/) {
		message.channel.awaitMessages(() => true, {
			max: 1,
			time: 5000
		}).then(collected => {
			// 何も収集できなかった場合をメッセージが送信されなかったとみなし警告をする
			if (!collected.size) {
        		console.log('1')
				message.channel.send({
					embed: {
						title: '警告',
						fields: [{
							name: '内容',
							value: '最後にこのチャンネルが使用されてから2週間が経過しました\nあと3日使用されなければこのチャンネルは削除されます。\n現在テスト中\n設定5秒'
						}]
					}
				})
        		console.log('2')
		  		console.log('t')
         		message.channel.awaitMessages(() => true, {
		    	  	max: 1,
		    	  	time: 5000
	       		}).then(collected => {
		  			// 何も収集できなかった場合をメッセージが送信されなかったとみなし警告をする
			  		if (!collected.size) {
						console.log('3')
						message.channel.send({
							embed: {
								title: '通告',
								fields: [{
									name: '内容',
									value: '最後の警告からこのチャンネルが使用されずに3日が経過しました\nこのチャンネルは間もなく削除されます\n現在テスト中\n設定5秒'
								}]
							}
						})
            			console.log('4')
					}
				}
			})
		})		
	}*/

	/*
		/*freeチャンネル管理*/
		/*
	//チャンネルの作成
	if (message.channel.id == '861026346746118144') {
		//メッセージ内容取得
		var content = message.content
		//チャンネル作成
		message.guild.channels.create(content), {
			parent: '857905400899436545',
			topic: (
				`${message.author.tag}が作成したチャンネルです\n
			なおこのチャンネルは専属botによって管理されてます\n'
			userid:${message.author.id}/n
			automaticmanagement`
			)
		}
	}*/
	/*自動消去*/
	/* if (message.channel.topic = /automaticmanagement/) {
	   message.channel.awaitMessages(() => true, { max: 1, time: 5 *1000 })
	  .then(collected => {
		// メッセージ取得されなかったとき
		if (!collected.size) {
		  message.channel.send(
			{endeb: {
			  color: '16776960',
			  title: '警告',
			  fields: [
				{
				  name: '内容',
				  value: '最後にこのチャンネルが使われてから1週間が経過しました\nあと3日使われなかった場合、このチャンネルは削除されます\n現在テスト中'
				}
			  ]
			}}
		  )
		message.channel.awaitMessages(() => true, { max: 1, time: 5 * 1000 })
		.then(collected => {
		  if (!collected.size) {
			message.channel.send(
			  {endeb: {
				color: '16711680',
				title: '通知',
				fields: [
				  {
					name: '内容',
					value: 'このチャンネルは10日間使用されなかったので間もなく削除されます\nすでに削除は確定しているので新しいチャンネルを作成してください'
				  }
				]
			  }}
			)
		  }
		  setTimeout({
			message.channel.send('チャンネル削除');
   //        message.channel.delete('freeチャンネルが10日間使われなかったため')
		  },5 * 1000)
		}
		}
	  })
	 }
	 */

	 /*
		//ユーザー名のチャンネルが存在するか確認する
		let channel = client.guilds.cache.get(serverID).channels.cache.find((channel) => channel.name === message.author.id)
		//チャンネル存在するか確認する
		if (channel === void 0) {
			//チャンネル作成
			client.guilds.cache.get(serverID).channels.create(message.author.id, {
				//カテゴリ指定
				parent: "921763594276851722",
				//チャンネルトピックにユーザーIDを設定
				topic: message.author.tag
			})
			//チャンネル情報の再取得
			channel = client.guilds.cache.get(serverID).channels.cache.find((channel) => channel.name === message.author.id)
			//メッセージの送信
			client.guilds.cache.get(serverID).channels.cache.find(ch => ch.name === channel).send(message.content)
		} else {
			//メッセージの送信
			client.guilds.cache.get(serverID).channels.cache.find(ch => ch.name === channel).send(message.content)
		}*/